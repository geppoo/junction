// Mocks generated by Mockito 5.4.2 from annotations
// in junction/test/search_builder_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:junction/core/io/file_interface.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FileInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileInterface extends _i1.Mock implements _i2.FileInterface {
  MockFileInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get initialAssetFile => (super.noSuchMethod(
        Invocation.getter(#initialAssetFile),
        returnValue: '',
      ) as String);

  @override
  set initialAssetFile(String? _initialAssetFile) => super.noSuchMethod(
        Invocation.setter(
          #initialAssetFile,
          _initialAssetFile,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get localFilename => (super.noSuchMethod(
        Invocation.getter(#localFilename),
        returnValue: '',
      ) as String);

  @override
  set localFilename(String? _localFilename) => super.noSuchMethod(
        Invocation.setter(
          #localFilename,
          _localFilename,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> writeToFile(String? data) => (super.noSuchMethod(
        Invocation.method(
          #writeToFile,
          [data],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
